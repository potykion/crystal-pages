using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Crystal.Models;
using Crystal.Utils;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.EntityFrameworkCore;

namespace Crystal.Pages.Substances.{{ model_dir }}
{
    public class IndexModel : PageModel
    {
        private readonly CrystalContext _context;
        private readonly ContextUtils _contextUtils;

        public IndexModel(CrystalContext context)
        {
            _context = context;
            _contextUtils = new ContextUtils(_context);
        }

        {% if language_fields %}
        public IList<{{ model }}Language> {{ model }}Language { get; set; }
        {% else %}
        public IList<{{ model }}> {{ model }} { get; set; }
        {% endif %}
        public IList<GrafTablLanguage> Images { get; set; }
        {% if has_references %}
        public IDictionary<int, BibliogrLanguage> References { get; set; }
        {% endif %}
        {% if has_sing %}
        public IList<SingTabl> SingTabl { get; set; }
        {% endif %}

        public async Task OnGetAsync(string systemUrl {% if has_sing %}, string sing{% endif %})
        {
            var headClue = _contextUtils.GetHeadClueBySystemUrl(systemUrl);

            {% if language_fields %}
            var substance{{ model }} = _context.{{ model }}Language
                .Include(m => m.{{ model }})
                .Where(m => m.{{ model }}.HeadClue == headClue)
                .Where(m => m.LanguageId == this.GetLanguageId());
            {% else %}
            var substance{{ model }} = _context.{{ model }}
                .Where(m => m.HeadClue == headClue);
            {% endif %}

            {% if has_sing %}
            if (!string.IsNullOrEmpty(sing))
            {
                {% if language_fields %}
                substance{{ model }} = substance{{ model }}.Where(m => m.{{ model }}.SingCode == sing);
                {% else %}
                substance{{ model }} = substance{{ model }}.Where(m => m.SingCode == sing);
                {% endif %}
            }
            {% endif %}

            {% if extra_filters %}
            substance{{ model }} = substance{{ model }}
            {% for filter_ in extra_filters %}
                .Where(m => {{ filter_ }}){% if loop.last %};{% endif %}
            {% endfor %}

            {% endif %}

            {% if language_fields %}
            {{ model }}Language = await substance{{ model }}.ToListAsync();
            {% else %}
            {{ model }} = await substance{{ model }}.ToListAsync();
            {% endif %}

            Images = await _context.GrafTablLanguage
                .Include(image => image.GrafTabl)
                .Where(image => image.LanguageId == this.GetLanguageId())
                .Where(image => image.GrafTabl.HeadClue == headClue)
                .Where(image => image.GrafTabl.NompClue == {{ model_id }})
                .ToListAsync();

            {% if has_sing %}
            SingTabl = await _context.SingTabl
                .Where(s => s.HeadClue == headClue)
                .ToListAsync();
            {% endif %}

            {% if has_references %}
            var bibliogrLanguage = await _context.BibliogrLanguage
                .Include(b => b.Bibliogr)
                .Where(b => b.LanguageId == this.GetLanguageId())
                .ToDictionaryAsync(b => b.BibliogrId, b => b);

            {% if language_fields %}
            References = {{ model }}Language
                .ToDictionary(h => h.{{ model }}Id, h =>
                    h.{{ model }}.Bknumber.HasValue ? bibliogrLanguage[(int) h.{{ model }}.Bknumber] : null
                );
            {% else %}
            References = {{ model }}
                .ToDictionary(h => h.Id, h =>
                    h.Bknumber.HasValue ? bibliogrLanguage[(int) h.Bknumber] : null
                );
            {% endif %}

            {% endif %}
        }
    }
}